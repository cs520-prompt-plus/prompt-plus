version: "3"

services:
  # ----------------------------------------------------------------
  # 1) prisma-init: runs prisma generate + db push, writes clients out
  # ----------------------------------------------------------------
  prisma-init:
    hostname: prisma-init
    build:
      context: ./prisma
      dockerfile: Dockerfile
    env_file:
      - ./prisma/.env
    depends_on:
      postgres_db:
        condition: service_healthy
    # mount in your schema + .env at /app,
    # and mount the two output dirs so prisma can write into them
    volumes:
      - "./prisma:/app" # <-- schema.prisma + .env
      - "./front_end/src/prisma:/front_end/src/prisma" # <-- JS client output
      - "./back_end/prisma-client-py:/back_end/prisma-client-py" # <-- Python client output

  # ----------------------------------------------------------------
  # 2) backend app: FastAPI + prisma-client-py
  # ----------------------------------------------------------------
  app:
    hostname: back_end
    build:
      context: ./back_end
      dockerfile: Dockerfile
      args:
        - uvicorn_extras=--reload --use-colors --log-level debug
    env_file:
      - ./back_end/.env
    depends_on:
      - prisma-init
      - postgres_db
    ports:
      - "8000:80"
    volumes:
      - "./back_end/app:/app/app:ro"
      - "./prisma:/app/prisma:ro" # for runtime schema introspection (if you need it)
      - "./back_end/prisma-client-py:/app/prisma-client-py:ro"
    environment:
      # so Python can import the generated client package
      - PYTHONPATH=/app/prisma-client-py
    networks:
      - prisma-network

  # ----------------------------------------------------------------
  # 3) frontend-dev: Next.js + @prisma/client
  # ----------------------------------------------------------------
  frontend-dev:
    hostname: front_end
    build:
      context: ./front_end
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - prisma-init
      - postgres_db
    volumes:
      - "./front_end:/app"
      - "./prisma:/app/prisma:ro" # make your schema available
      - "./front_end/src/prisma:/app/src/prisma:ro" # the generated JS client
    environment:
      - DATABASE_URL=postgresql://postgres:prisma@postgres_db:5432/postgres
    networks:
      - prisma-network

  # ----------------------------------------------------------------
  # 4) postgres
  # ----------------------------------------------------------------
  postgres_db:
    image: postgres:15
    hostname: postgres_db
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prisma
    ports:
      - "5432:5432"
    networks:
      - prisma-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

networks:
  prisma-network:
    driver: bridge
