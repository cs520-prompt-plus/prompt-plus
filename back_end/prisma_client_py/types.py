# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    user_id: _str
    responses: 'ResponseCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    user_id: _str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: _str
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_user_id_Input = TypedDict(
    '_UserWhereUnique_user_id_Input',
    {
        'user_id': '_str',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_user_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user_id: _str
    name: _str
    email: _str
    password: _str
    responses: 'ResponseUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    user_id: _str
    name: _str
    email: _str
    password: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_user_id_OrderByInput = TypedDict(
    '_User_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_user_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    responses: Union[bool, 'FindManyResponseArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    responses: Union[bool, 'FindManyResponseArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    responses: Union[bool, 'FindManyResponseArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    responses: Union[bool, 'FindManyResponseArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    responses: Union[bool, 'FindManyResponseArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ResponseIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ResponseIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ResponseIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ResponseIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ResponseIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ResponseArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ResponseIncludeFromResponseRecursive1'


class ResponseArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ResponseIncludeFromResponseRecursive2'


class ResponseArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ResponseIncludeFromResponseRecursive3'


class ResponseArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ResponseIncludeFromResponseRecursive4'


class ResponseArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyResponseArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive1'


class FindManyResponseArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive2'


class FindManyResponseArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive3'


class FindManyResponseArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive4'


class FindManyResponseArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    
    

class CategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    patterns: Union[bool, 'FindManyPatternArgsFromUserRecursive1']
    response: Union[bool, 'ResponseArgsFromUserRecursive1']


class CategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    patterns: Union[bool, 'FindManyPatternArgsFromUserRecursive2']
    response: Union[bool, 'ResponseArgsFromUserRecursive2']


class CategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    patterns: Union[bool, 'FindManyPatternArgsFromUserRecursive3']
    response: Union[bool, 'ResponseArgsFromUserRecursive3']


class CategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    patterns: Union[bool, 'FindManyPatternArgsFromUserRecursive4']
    response: Union[bool, 'ResponseArgsFromUserRecursive4']


class CategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class PatternIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    category: Union[bool, 'CategoryArgsFromUserRecursive1']


class PatternIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    category: Union[bool, 'CategoryArgsFromUserRecursive2']


class PatternIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    category: Union[bool, 'CategoryArgsFromUserRecursive3']


class PatternIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    category: Union[bool, 'CategoryArgsFromUserRecursive4']


class PatternIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PatternArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PatternIncludeFromPatternRecursive1'


class PatternArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PatternIncludeFromPatternRecursive2'


class PatternArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PatternIncludeFromPatternRecursive3'


class PatternArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PatternIncludeFromPatternRecursive4'


class PatternArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPatternArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive1'


class FindManyPatternArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive2'


class FindManyPatternArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive3'


class FindManyPatternArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive4'


class FindManyPatternArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    responses: 'ResponseListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    responses: 'ResponseListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    responses: 'ResponseListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    responses: 'ResponseListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    responses: 'ResponseListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    user_id: _str
    name: _str
    email: _str
    password: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    user_id: _str
    name: _str
    email: _str
    password: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    user_id: bool
    name: bool
    email: bool
    password: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    user_id: bool
    name: bool
    email: bool
    password: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'user_id': bool,
        'name': bool,
        'email': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'user_id': int,
        'name': int,
        'email': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'user_id',
    'name',
    'email',
    'password',
    'responses',
]
UserScalarFieldKeys = Literal[
    'user_id',
    'name',
    'email',
    'password',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'responses',
    ]

# Response types

class ResponseOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Response create method"""
    response_id: _str
    created_at: datetime.datetime
    categories: 'CategoryCreateManyNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _str


class ResponseCreateInput(ResponseOptionalCreateInput):
    """Required arguments to the Response create method"""
    input: _str
    output: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ResponseOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Response create method, without relations"""
    response_id: _str
    created_at: datetime.datetime
    user_id: _str


class ResponseCreateWithoutRelationsInput(ResponseOptionalCreateWithoutRelationsInput):
    """Required arguments to the Response create method, without relations"""
    input: _str
    output: _str

class ResponseConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ResponseCreateWithoutRelationsInput'
    where: 'ResponseWhereUniqueInput'

class ResponseCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ResponseCreateWithoutRelationsInput'
    connect: 'ResponseWhereUniqueInput'
    connect_or_create: 'ResponseConnectOrCreateWithoutRelationsInput'


class ResponseCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ResponseCreateWithoutRelationsInput', List['ResponseCreateWithoutRelationsInput']]
    connect: Union['ResponseWhereUniqueInput', List['ResponseWhereUniqueInput']]
    connect_or_create: Union['ResponseConnectOrCreateWithoutRelationsInput', List['ResponseConnectOrCreateWithoutRelationsInput']]

_ResponseWhereUnique_response_id_Input = TypedDict(
    '_ResponseWhereUnique_response_id_Input',
    {
        'response_id': '_str',
    },
    total=True
)

ResponseWhereUniqueInput = _ResponseWhereUnique_response_id_Input


class ResponseUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    response_id: _str
    input: _str
    output: _str
    created_at: datetime.datetime
    categories: 'CategoryUpdateManyWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class ResponseUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    response_id: _str
    input: _str
    output: _str
    created_at: datetime.datetime


class ResponseUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ResponseCreateWithoutRelationsInput']
    connect: List['ResponseWhereUniqueInput']
    connect_or_create: List['ResponseConnectOrCreateWithoutRelationsInput']
    set: List['ResponseWhereUniqueInput']
    disconnect: List['ResponseWhereUniqueInput']
    delete: List['ResponseWhereUniqueInput']

    # TODO
    # update: List['ResponseUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ResponseUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ResponseScalarWhereInput']
    # upsert: List['ResponseUpserteWithWhereUniqueWithoutRelationsInput']


class ResponseUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ResponseCreateWithoutRelationsInput'
    connect: 'ResponseWhereUniqueInput'
    connect_or_create: 'ResponseConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ResponseUpdateInput'
    # upsert: 'ResponseUpsertWithoutRelationsInput'


class ResponseUpsertInput(TypedDict):
    create: 'ResponseCreateInput'
    update: 'ResponseUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Response_response_id_OrderByInput = TypedDict(
    '_Response_response_id_OrderByInput',
    {
        'response_id': 'SortOrder',
    },
    total=True
)

_Response_input_OrderByInput = TypedDict(
    '_Response_input_OrderByInput',
    {
        'input': 'SortOrder',
    },
    total=True
)

_Response_output_OrderByInput = TypedDict(
    '_Response_output_OrderByInput',
    {
        'output': 'SortOrder',
    },
    total=True
)

_Response_created_at_OrderByInput = TypedDict(
    '_Response_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Response_user_id_OrderByInput = TypedDict(
    '_Response_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Response_RelevanceInner = TypedDict(
    '_Response_RelevanceInner',
    {
        'fields': 'List[ResponseScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Response_RelevanceOrderByInput = TypedDict(
    '_Response_RelevanceOrderByInput',
    {
        '_relevance': '_Response_RelevanceInner',
    },
    total=True
)

ResponseOrderByInput = Union[
    '_Response_response_id_OrderByInput',
    '_Response_input_OrderByInput',
    '_Response_output_OrderByInput',
    '_Response_created_at_OrderByInput',
    '_Response_user_id_OrderByInput',
    '_Response_RelevanceOrderByInput',
]



# recursive Response types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ResponseRelationFilter = TypedDict(
    'ResponseRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ResponseListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ResponseInclude(TypedDict, total=False):
    """Response relational arguments"""
    categories: Union[bool, 'FindManyCategoryArgsFromResponse']
    user: Union[bool, 'UserArgsFromResponse']


    

class UserIncludeFromResponse(TypedDict, total=False):
    """Relational arguments for Response"""
    responses: Union[bool, 'FindManyResponseArgsFromResponseRecursive1']


class UserIncludeFromResponseRecursive1(TypedDict, total=False):
    """Relational arguments for Response"""
    responses: Union[bool, 'FindManyResponseArgsFromResponseRecursive2']


class UserIncludeFromResponseRecursive2(TypedDict, total=False):
    """Relational arguments for Response"""
    responses: Union[bool, 'FindManyResponseArgsFromResponseRecursive3']


class UserIncludeFromResponseRecursive3(TypedDict, total=False):
    """Relational arguments for Response"""
    responses: Union[bool, 'FindManyResponseArgsFromResponseRecursive4']


class UserIncludeFromResponseRecursive4(TypedDict, total=False):
    """Relational arguments for Response"""

    

class UserArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    
    

class FindManyUserArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ResponseIncludeFromResponse(TypedDict, total=False):
    """Relational arguments for Response"""
    categories: Union[bool, 'FindManyCategoryArgsFromResponseRecursive1']
    user: Union[bool, 'UserArgsFromResponseRecursive1']


class ResponseIncludeFromResponseRecursive1(TypedDict, total=False):
    """Relational arguments for Response"""
    categories: Union[bool, 'FindManyCategoryArgsFromResponseRecursive2']
    user: Union[bool, 'UserArgsFromResponseRecursive2']


class ResponseIncludeFromResponseRecursive2(TypedDict, total=False):
    """Relational arguments for Response"""
    categories: Union[bool, 'FindManyCategoryArgsFromResponseRecursive3']
    user: Union[bool, 'UserArgsFromResponseRecursive3']


class ResponseIncludeFromResponseRecursive3(TypedDict, total=False):
    """Relational arguments for Response"""
    categories: Union[bool, 'FindManyCategoryArgsFromResponseRecursive4']
    user: Union[bool, 'UserArgsFromResponseRecursive4']


class ResponseIncludeFromResponseRecursive4(TypedDict, total=False):
    """Relational arguments for Response"""

    

class ResponseArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    include: 'ResponseIncludeFromResponseRecursive1'


class ResponseArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    include: 'ResponseIncludeFromResponseRecursive2'


class ResponseArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    include: 'ResponseIncludeFromResponseRecursive3'


class ResponseArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    include: 'ResponseIncludeFromResponseRecursive4'


class ResponseArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    
    

class FindManyResponseArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive1'


class FindManyResponseArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive2'


class FindManyResponseArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive3'


class FindManyResponseArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive4'


class FindManyResponseArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    
    

class CategoryIncludeFromResponse(TypedDict, total=False):
    """Relational arguments for Response"""
    patterns: Union[bool, 'FindManyPatternArgsFromResponseRecursive1']
    response: Union[bool, 'ResponseArgsFromResponseRecursive1']


class CategoryIncludeFromResponseRecursive1(TypedDict, total=False):
    """Relational arguments for Response"""
    patterns: Union[bool, 'FindManyPatternArgsFromResponseRecursive2']
    response: Union[bool, 'ResponseArgsFromResponseRecursive2']


class CategoryIncludeFromResponseRecursive2(TypedDict, total=False):
    """Relational arguments for Response"""
    patterns: Union[bool, 'FindManyPatternArgsFromResponseRecursive3']
    response: Union[bool, 'ResponseArgsFromResponseRecursive3']


class CategoryIncludeFromResponseRecursive3(TypedDict, total=False):
    """Relational arguments for Response"""
    patterns: Union[bool, 'FindManyPatternArgsFromResponseRecursive4']
    response: Union[bool, 'ResponseArgsFromResponseRecursive4']


class CategoryIncludeFromResponseRecursive4(TypedDict, total=False):
    """Relational arguments for Response"""

    

class CategoryArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    
    

class FindManyCategoryArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class PatternIncludeFromResponse(TypedDict, total=False):
    """Relational arguments for Response"""
    category: Union[bool, 'CategoryArgsFromResponseRecursive1']


class PatternIncludeFromResponseRecursive1(TypedDict, total=False):
    """Relational arguments for Response"""
    category: Union[bool, 'CategoryArgsFromResponseRecursive2']


class PatternIncludeFromResponseRecursive2(TypedDict, total=False):
    """Relational arguments for Response"""
    category: Union[bool, 'CategoryArgsFromResponseRecursive3']


class PatternIncludeFromResponseRecursive3(TypedDict, total=False):
    """Relational arguments for Response"""
    category: Union[bool, 'CategoryArgsFromResponseRecursive4']


class PatternIncludeFromResponseRecursive4(TypedDict, total=False):
    """Relational arguments for Response"""

    

class PatternArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    include: 'PatternIncludeFromPatternRecursive1'


class PatternArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    include: 'PatternIncludeFromPatternRecursive2'


class PatternArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    include: 'PatternIncludeFromPatternRecursive3'


class PatternArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    include: 'PatternIncludeFromPatternRecursive4'


class PatternArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    
    

class FindManyPatternArgsFromResponse(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive1'


class FindManyPatternArgsFromResponseRecursive1(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive2'


class FindManyPatternArgsFromResponseRecursive2(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive3'


class FindManyPatternArgsFromResponseRecursive3(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive4'


class FindManyPatternArgsFromResponseRecursive4(TypedDict, total=False):
    """Arguments for Response"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    


FindManyResponseArgs = FindManyResponseArgsFromResponse
FindFirstResponseArgs = FindManyResponseArgsFromResponse


    

class ResponseWhereInput(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    output: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    categories: 'CategoryListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ResponseWhereInputRecursive1', List['ResponseWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ResponseWhereInputRecursive1']
    OR: List['ResponseWhereInputRecursive1']
    NOT: List['ResponseWhereInputRecursive1']


class ResponseWhereInputRecursive1(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    output: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    categories: 'CategoryListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ResponseWhereInputRecursive2', List['ResponseWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ResponseWhereInputRecursive2']
    OR: List['ResponseWhereInputRecursive2']
    NOT: List['ResponseWhereInputRecursive2']


class ResponseWhereInputRecursive2(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    output: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    categories: 'CategoryListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ResponseWhereInputRecursive3', List['ResponseWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ResponseWhereInputRecursive3']
    OR: List['ResponseWhereInputRecursive3']
    NOT: List['ResponseWhereInputRecursive3']


class ResponseWhereInputRecursive3(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    output: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    categories: 'CategoryListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ResponseWhereInputRecursive4', List['ResponseWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ResponseWhereInputRecursive4']
    OR: List['ResponseWhereInputRecursive4']
    NOT: List['ResponseWhereInputRecursive4']


class ResponseWhereInputRecursive4(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    output: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    categories: 'CategoryListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_str, 'types.StringFilter']



# aggregate Response types


    

class ResponseScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    output: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ResponseScalarWhereWithAggregatesInputRecursive1']
    OR: List['ResponseScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ResponseScalarWhereWithAggregatesInputRecursive1']


class ResponseScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    output: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ResponseScalarWhereWithAggregatesInputRecursive2']
    OR: List['ResponseScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ResponseScalarWhereWithAggregatesInputRecursive2']


class ResponseScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    output: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ResponseScalarWhereWithAggregatesInputRecursive3']
    OR: List['ResponseScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ResponseScalarWhereWithAggregatesInputRecursive3']


class ResponseScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    output: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ResponseScalarWhereWithAggregatesInputRecursive4']
    OR: List['ResponseScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ResponseScalarWhereWithAggregatesInputRecursive4']


class ResponseScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Response arguments for searching"""
    response_id: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    output: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']



class ResponseGroupByOutput(TypedDict, total=False):
    response_id: _str
    input: _str
    output: _str
    created_at: datetime.datetime
    user_id: _str
    _sum: 'ResponseSumAggregateOutput'
    _avg: 'ResponseAvgAggregateOutput'
    _min: 'ResponseMinAggregateOutput'
    _max: 'ResponseMaxAggregateOutput'
    _count: 'ResponseCountAggregateOutput'


class ResponseAvgAggregateOutput(TypedDict, total=False):
    """Response output for aggregating averages"""


class ResponseSumAggregateOutput(TypedDict, total=False):
    """Response output for aggregating sums"""


class ResponseScalarAggregateOutput(TypedDict, total=False):
    """Response output including scalar fields"""
    response_id: _str
    input: _str
    output: _str
    created_at: datetime.datetime
    user_id: _str


ResponseMinAggregateOutput = ResponseScalarAggregateOutput
ResponseMaxAggregateOutput = ResponseScalarAggregateOutput


class ResponseMaxAggregateInput(TypedDict, total=False):
    """Response input for aggregating by max"""
    response_id: bool
    input: bool
    output: bool
    created_at: bool
    user_id: bool


class ResponseMinAggregateInput(TypedDict, total=False):
    """Response input for aggregating by min"""
    response_id: bool
    input: bool
    output: bool
    created_at: bool
    user_id: bool


class ResponseNumberAggregateInput(TypedDict, total=False):
    """Response input for aggregating numbers"""


ResponseAvgAggregateInput = ResponseNumberAggregateInput
ResponseSumAggregateInput = ResponseNumberAggregateInput


ResponseCountAggregateInput = TypedDict(
    'ResponseCountAggregateInput',
    {
        'response_id': bool,
        'input': bool,
        'output': bool,
        'created_at': bool,
        'user_id': bool,
        '_all': bool,
    },
    total=False,
)

ResponseCountAggregateOutput = TypedDict(
    'ResponseCountAggregateOutput',
    {
        'response_id': int,
        'input': int,
        'output': int,
        'created_at': int,
        'user_id': int,
        '_all': int,
    },
    total=False,
)


ResponseKeys = Literal[
    'response_id',
    'input',
    'output',
    'created_at',
    'categories',
    'user',
    'user_id',
]
ResponseScalarFieldKeys = Literal[
    'response_id',
    'input',
    'output',
    'created_at',
    'user_id',
]
ResponseScalarFieldKeysT = TypeVar('ResponseScalarFieldKeysT', bound=ResponseScalarFieldKeys)

ResponseRelationalFieldKeys = Literal[
        'categories',
        'user',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    category_id: _str
    patterns: 'PatternCreateManyNestedWithoutRelationsInput'
    response: 'ResponseCreateNestedWithoutRelationsInput'
    response_id: _str


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    category: _str
    input: _str
    preview: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    category_id: _str
    response_id: _str


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    category: _str
    input: _str
    preview: _str

class CategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryCreateWithoutRelationsInput'
    where: 'CategoryWhereUniqueInput'

class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]
    connect_or_create: Union['CategoryConnectOrCreateWithoutRelationsInput', List['CategoryConnectOrCreateWithoutRelationsInput']]

_CategoryWhereUnique_category_id_Input = TypedDict(
    '_CategoryWhereUnique_category_id_Input',
    {
        'category_id': '_str',
    },
    total=True
)

CategoryWhereUniqueInput = _CategoryWhereUnique_category_id_Input


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    category_id: _str
    category: _str
    input: _str
    preview: _str
    patterns: 'PatternUpdateManyWithoutRelationsInput'
    response: 'ResponseUpdateOneWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    category_id: _str
    category: _str
    input: _str
    preview: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    connect_or_create: List['CategoryConnectOrCreateWithoutRelationsInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_category_id_OrderByInput = TypedDict(
    '_Category_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_Category_category_OrderByInput = TypedDict(
    '_Category_category_OrderByInput',
    {
        'category': 'SortOrder',
    },
    total=True
)

_Category_input_OrderByInput = TypedDict(
    '_Category_input_OrderByInput',
    {
        'input': 'SortOrder',
    },
    total=True
)

_Category_preview_OrderByInput = TypedDict(
    '_Category_preview_OrderByInput',
    {
        'preview': 'SortOrder',
    },
    total=True
)

_Category_response_id_OrderByInput = TypedDict(
    '_Category_response_id_OrderByInput',
    {
        'response_id': 'SortOrder',
    },
    total=True
)

_Category_RelevanceInner = TypedDict(
    '_Category_RelevanceInner',
    {
        'fields': 'List[CategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Category_RelevanceOrderByInput = TypedDict(
    '_Category_RelevanceOrderByInput',
    {
        '_relevance': '_Category_RelevanceInner',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_category_id_OrderByInput',
    '_Category_category_OrderByInput',
    '_Category_input_OrderByInput',
    '_Category_preview_OrderByInput',
    '_Category_response_id_OrderByInput',
    '_Category_RelevanceOrderByInput',
]



# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    patterns: Union[bool, 'FindManyPatternArgsFromCategory']
    response: Union[bool, 'ResponseArgsFromCategory']


    

class UserIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    responses: Union[bool, 'FindManyResponseArgsFromCategoryRecursive1']


class UserIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    responses: Union[bool, 'FindManyResponseArgsFromCategoryRecursive2']


class UserIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    responses: Union[bool, 'FindManyResponseArgsFromCategoryRecursive3']


class UserIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    responses: Union[bool, 'FindManyResponseArgsFromCategoryRecursive4']


class UserIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ResponseIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive1']
    user: Union[bool, 'UserArgsFromCategoryRecursive1']


class ResponseIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive2']
    user: Union[bool, 'UserArgsFromCategoryRecursive2']


class ResponseIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive3']
    user: Union[bool, 'UserArgsFromCategoryRecursive3']


class ResponseIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive4']
    user: Union[bool, 'UserArgsFromCategoryRecursive4']


class ResponseIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ResponseArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ResponseIncludeFromResponseRecursive1'


class ResponseArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ResponseIncludeFromResponseRecursive2'


class ResponseArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ResponseIncludeFromResponseRecursive3'


class ResponseArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ResponseIncludeFromResponseRecursive4'


class ResponseArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyResponseArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive1'


class FindManyResponseArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive2'


class FindManyResponseArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive3'


class FindManyResponseArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive4'


class FindManyResponseArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    patterns: Union[bool, 'FindManyPatternArgsFromCategoryRecursive1']
    response: Union[bool, 'ResponseArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    patterns: Union[bool, 'FindManyPatternArgsFromCategoryRecursive2']
    response: Union[bool, 'ResponseArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    patterns: Union[bool, 'FindManyPatternArgsFromCategoryRecursive3']
    response: Union[bool, 'ResponseArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    patterns: Union[bool, 'FindManyPatternArgsFromCategoryRecursive4']
    response: Union[bool, 'ResponseArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class PatternIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive1']


class PatternIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive2']


class PatternIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive3']


class PatternIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive4']


class PatternIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class PatternArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PatternIncludeFromPatternRecursive1'


class PatternArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PatternIncludeFromPatternRecursive2'


class PatternArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PatternIncludeFromPatternRecursive3'


class PatternArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PatternIncludeFromPatternRecursive4'


class PatternArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyPatternArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive1'


class FindManyPatternArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive2'


class FindManyPatternArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive3'


class FindManyPatternArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive4'


class FindManyPatternArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringFilter']
    category: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    preview: Union[_str, 'types.StringFilter']
    patterns: 'PatternListRelationFilter'
    response: 'ResponseRelationFilter'
    response_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringFilter']
    category: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    preview: Union[_str, 'types.StringFilter']
    patterns: 'PatternListRelationFilter'
    response: 'ResponseRelationFilter'
    response_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringFilter']
    category: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    preview: Union[_str, 'types.StringFilter']
    patterns: 'PatternListRelationFilter'
    response: 'ResponseRelationFilter'
    response_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringFilter']
    category: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    preview: Union[_str, 'types.StringFilter']
    patterns: 'PatternListRelationFilter'
    response: 'ResponseRelationFilter'
    response_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringFilter']
    category: Union[_str, 'types.StringFilter']
    input: Union[_str, 'types.StringFilter']
    preview: Union[_str, 'types.StringFilter']
    patterns: 'PatternListRelationFilter'
    response: 'ResponseRelationFilter'
    response_id: Union[_str, 'types.StringFilter']



# aggregate Category types


    

class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    preview: Union[_str, 'types.StringWithAggregatesFilter']
    response_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive1']


class CategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    preview: Union[_str, 'types.StringWithAggregatesFilter']
    response_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive2']


class CategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    preview: Union[_str, 'types.StringWithAggregatesFilter']
    response_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive3']


class CategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    preview: Union[_str, 'types.StringWithAggregatesFilter']
    response_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive4']


class CategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    category_id: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    input: Union[_str, 'types.StringWithAggregatesFilter']
    preview: Union[_str, 'types.StringWithAggregatesFilter']
    response_id: Union[_str, 'types.StringWithAggregatesFilter']



class CategoryGroupByOutput(TypedDict, total=False):
    category_id: _str
    category: _str
    input: _str
    preview: _str
    response_id: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    category_id: _str
    category: _str
    input: _str
    preview: _str
    response_id: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    category_id: bool
    category: bool
    input: bool
    preview: bool
    response_id: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    category_id: bool
    category: bool
    input: bool
    preview: bool
    response_id: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'category_id': bool,
        'category': bool,
        'input': bool,
        'preview': bool,
        'response_id': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'category_id': int,
        'category': int,
        'input': int,
        'preview': int,
        'response_id': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'category_id',
    'category',
    'input',
    'preview',
    'patterns',
    'response',
    'response_id',
]
CategoryScalarFieldKeys = Literal[
    'category_id',
    'category',
    'input',
    'preview',
    'response_id',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'patterns',
        'response',
    ]

# Pattern types

class PatternOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Pattern create method"""
    pattern_id: _str
    category: 'CategoryCreateNestedWithoutRelationsInput'
    category_id: _str


class PatternCreateInput(PatternOptionalCreateInput):
    """Required arguments to the Pattern create method"""
    pattern: _str
    feedback: _str
    applied: _bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PatternOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Pattern create method, without relations"""
    pattern_id: _str
    category_id: _str


class PatternCreateWithoutRelationsInput(PatternOptionalCreateWithoutRelationsInput):
    """Required arguments to the Pattern create method, without relations"""
    pattern: _str
    feedback: _str
    applied: _bool

class PatternConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PatternCreateWithoutRelationsInput'
    where: 'PatternWhereUniqueInput'

class PatternCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PatternCreateWithoutRelationsInput'
    connect: 'PatternWhereUniqueInput'
    connect_or_create: 'PatternConnectOrCreateWithoutRelationsInput'


class PatternCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PatternCreateWithoutRelationsInput', List['PatternCreateWithoutRelationsInput']]
    connect: Union['PatternWhereUniqueInput', List['PatternWhereUniqueInput']]
    connect_or_create: Union['PatternConnectOrCreateWithoutRelationsInput', List['PatternConnectOrCreateWithoutRelationsInput']]

_PatternWhereUnique_pattern_id_Input = TypedDict(
    '_PatternWhereUnique_pattern_id_Input',
    {
        'pattern_id': '_str',
    },
    total=True
)

PatternWhereUniqueInput = _PatternWhereUnique_pattern_id_Input


class PatternUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    pattern_id: _str
    pattern: _str
    feedback: _str
    applied: _bool
    category: 'CategoryUpdateOneWithoutRelationsInput'


class PatternUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    pattern_id: _str
    pattern: _str
    feedback: _str
    applied: _bool


class PatternUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PatternCreateWithoutRelationsInput']
    connect: List['PatternWhereUniqueInput']
    connect_or_create: List['PatternConnectOrCreateWithoutRelationsInput']
    set: List['PatternWhereUniqueInput']
    disconnect: List['PatternWhereUniqueInput']
    delete: List['PatternWhereUniqueInput']

    # TODO
    # update: List['PatternUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PatternUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PatternScalarWhereInput']
    # upsert: List['PatternUpserteWithWhereUniqueWithoutRelationsInput']


class PatternUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PatternCreateWithoutRelationsInput'
    connect: 'PatternWhereUniqueInput'
    connect_or_create: 'PatternConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PatternUpdateInput'
    # upsert: 'PatternUpsertWithoutRelationsInput'


class PatternUpsertInput(TypedDict):
    create: 'PatternCreateInput'
    update: 'PatternUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Pattern_pattern_id_OrderByInput = TypedDict(
    '_Pattern_pattern_id_OrderByInput',
    {
        'pattern_id': 'SortOrder',
    },
    total=True
)

_Pattern_pattern_OrderByInput = TypedDict(
    '_Pattern_pattern_OrderByInput',
    {
        'pattern': 'SortOrder',
    },
    total=True
)

_Pattern_feedback_OrderByInput = TypedDict(
    '_Pattern_feedback_OrderByInput',
    {
        'feedback': 'SortOrder',
    },
    total=True
)

_Pattern_applied_OrderByInput = TypedDict(
    '_Pattern_applied_OrderByInput',
    {
        'applied': 'SortOrder',
    },
    total=True
)

_Pattern_category_id_OrderByInput = TypedDict(
    '_Pattern_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_Pattern_RelevanceInner = TypedDict(
    '_Pattern_RelevanceInner',
    {
        'fields': 'List[PatternScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Pattern_RelevanceOrderByInput = TypedDict(
    '_Pattern_RelevanceOrderByInput',
    {
        '_relevance': '_Pattern_RelevanceInner',
    },
    total=True
)

PatternOrderByInput = Union[
    '_Pattern_pattern_id_OrderByInput',
    '_Pattern_pattern_OrderByInput',
    '_Pattern_feedback_OrderByInput',
    '_Pattern_applied_OrderByInput',
    '_Pattern_category_id_OrderByInput',
    '_Pattern_RelevanceOrderByInput',
]



# recursive Pattern types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PatternRelationFilter = TypedDict(
    'PatternRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PatternListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PatternInclude(TypedDict, total=False):
    """Pattern relational arguments"""
    category: Union[bool, 'CategoryArgsFromPattern']


    

class UserIncludeFromPattern(TypedDict, total=False):
    """Relational arguments for Pattern"""
    responses: Union[bool, 'FindManyResponseArgsFromPatternRecursive1']


class UserIncludeFromPatternRecursive1(TypedDict, total=False):
    """Relational arguments for Pattern"""
    responses: Union[bool, 'FindManyResponseArgsFromPatternRecursive2']


class UserIncludeFromPatternRecursive2(TypedDict, total=False):
    """Relational arguments for Pattern"""
    responses: Union[bool, 'FindManyResponseArgsFromPatternRecursive3']


class UserIncludeFromPatternRecursive3(TypedDict, total=False):
    """Relational arguments for Pattern"""
    responses: Union[bool, 'FindManyResponseArgsFromPatternRecursive4']


class UserIncludeFromPatternRecursive4(TypedDict, total=False):
    """Relational arguments for Pattern"""

    

class UserArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    
    

class FindManyUserArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ResponseIncludeFromPattern(TypedDict, total=False):
    """Relational arguments for Pattern"""
    categories: Union[bool, 'FindManyCategoryArgsFromPatternRecursive1']
    user: Union[bool, 'UserArgsFromPatternRecursive1']


class ResponseIncludeFromPatternRecursive1(TypedDict, total=False):
    """Relational arguments for Pattern"""
    categories: Union[bool, 'FindManyCategoryArgsFromPatternRecursive2']
    user: Union[bool, 'UserArgsFromPatternRecursive2']


class ResponseIncludeFromPatternRecursive2(TypedDict, total=False):
    """Relational arguments for Pattern"""
    categories: Union[bool, 'FindManyCategoryArgsFromPatternRecursive3']
    user: Union[bool, 'UserArgsFromPatternRecursive3']


class ResponseIncludeFromPatternRecursive3(TypedDict, total=False):
    """Relational arguments for Pattern"""
    categories: Union[bool, 'FindManyCategoryArgsFromPatternRecursive4']
    user: Union[bool, 'UserArgsFromPatternRecursive4']


class ResponseIncludeFromPatternRecursive4(TypedDict, total=False):
    """Relational arguments for Pattern"""

    

class ResponseArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'ResponseIncludeFromResponseRecursive1'


class ResponseArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'ResponseIncludeFromResponseRecursive2'


class ResponseArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'ResponseIncludeFromResponseRecursive3'


class ResponseArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'ResponseIncludeFromResponseRecursive4'


class ResponseArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    
    

class FindManyResponseArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive1'


class FindManyResponseArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive2'


class FindManyResponseArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive3'


class FindManyResponseArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    include: 'ResponseIncludeFromResponseRecursive4'


class FindManyResponseArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['ResponseOrderByInput', List['ResponseOrderByInput']]
    where: 'ResponseWhereInput'
    cursor: 'ResponseWhereUniqueInput'
    distinct: List['ResponseScalarFieldKeys']
    
    

class CategoryIncludeFromPattern(TypedDict, total=False):
    """Relational arguments for Pattern"""
    patterns: Union[bool, 'FindManyPatternArgsFromPatternRecursive1']
    response: Union[bool, 'ResponseArgsFromPatternRecursive1']


class CategoryIncludeFromPatternRecursive1(TypedDict, total=False):
    """Relational arguments for Pattern"""
    patterns: Union[bool, 'FindManyPatternArgsFromPatternRecursive2']
    response: Union[bool, 'ResponseArgsFromPatternRecursive2']


class CategoryIncludeFromPatternRecursive2(TypedDict, total=False):
    """Relational arguments for Pattern"""
    patterns: Union[bool, 'FindManyPatternArgsFromPatternRecursive3']
    response: Union[bool, 'ResponseArgsFromPatternRecursive3']


class CategoryIncludeFromPatternRecursive3(TypedDict, total=False):
    """Relational arguments for Pattern"""
    patterns: Union[bool, 'FindManyPatternArgsFromPatternRecursive4']
    response: Union[bool, 'ResponseArgsFromPatternRecursive4']


class CategoryIncludeFromPatternRecursive4(TypedDict, total=False):
    """Relational arguments for Pattern"""

    

class CategoryArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    
    

class FindManyCategoryArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class PatternIncludeFromPattern(TypedDict, total=False):
    """Relational arguments for Pattern"""
    category: Union[bool, 'CategoryArgsFromPatternRecursive1']


class PatternIncludeFromPatternRecursive1(TypedDict, total=False):
    """Relational arguments for Pattern"""
    category: Union[bool, 'CategoryArgsFromPatternRecursive2']


class PatternIncludeFromPatternRecursive2(TypedDict, total=False):
    """Relational arguments for Pattern"""
    category: Union[bool, 'CategoryArgsFromPatternRecursive3']


class PatternIncludeFromPatternRecursive3(TypedDict, total=False):
    """Relational arguments for Pattern"""
    category: Union[bool, 'CategoryArgsFromPatternRecursive4']


class PatternIncludeFromPatternRecursive4(TypedDict, total=False):
    """Relational arguments for Pattern"""

    

class PatternArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'PatternIncludeFromPatternRecursive1'


class PatternArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'PatternIncludeFromPatternRecursive2'


class PatternArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'PatternIncludeFromPatternRecursive3'


class PatternArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    include: 'PatternIncludeFromPatternRecursive4'


class PatternArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    
    

class FindManyPatternArgsFromPattern(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive1'


class FindManyPatternArgsFromPatternRecursive1(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive2'


class FindManyPatternArgsFromPatternRecursive2(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive3'


class FindManyPatternArgsFromPatternRecursive3(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    include: 'PatternIncludeFromPatternRecursive4'


class FindManyPatternArgsFromPatternRecursive4(TypedDict, total=False):
    """Arguments for Pattern"""
    take: int
    skip: int
    order_by: Union['PatternOrderByInput', List['PatternOrderByInput']]
    where: 'PatternWhereInput'
    cursor: 'PatternWhereUniqueInput'
    distinct: List['PatternScalarFieldKeys']
    


FindManyPatternArgs = FindManyPatternArgsFromPattern
FindFirstPatternArgs = FindManyPatternArgsFromPattern


    

class PatternWhereInput(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringFilter']
    pattern: Union[_str, 'types.StringFilter']
    feedback: Union[_str, 'types.StringFilter']
    applied: Union[_bool, 'types.BooleanFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PatternWhereInputRecursive1', List['PatternWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PatternWhereInputRecursive1']
    OR: List['PatternWhereInputRecursive1']
    NOT: List['PatternWhereInputRecursive1']


class PatternWhereInputRecursive1(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringFilter']
    pattern: Union[_str, 'types.StringFilter']
    feedback: Union[_str, 'types.StringFilter']
    applied: Union[_bool, 'types.BooleanFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PatternWhereInputRecursive2', List['PatternWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PatternWhereInputRecursive2']
    OR: List['PatternWhereInputRecursive2']
    NOT: List['PatternWhereInputRecursive2']


class PatternWhereInputRecursive2(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringFilter']
    pattern: Union[_str, 'types.StringFilter']
    feedback: Union[_str, 'types.StringFilter']
    applied: Union[_bool, 'types.BooleanFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PatternWhereInputRecursive3', List['PatternWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PatternWhereInputRecursive3']
    OR: List['PatternWhereInputRecursive3']
    NOT: List['PatternWhereInputRecursive3']


class PatternWhereInputRecursive3(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringFilter']
    pattern: Union[_str, 'types.StringFilter']
    feedback: Union[_str, 'types.StringFilter']
    applied: Union[_bool, 'types.BooleanFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PatternWhereInputRecursive4', List['PatternWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PatternWhereInputRecursive4']
    OR: List['PatternWhereInputRecursive4']
    NOT: List['PatternWhereInputRecursive4']


class PatternWhereInputRecursive4(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringFilter']
    pattern: Union[_str, 'types.StringFilter']
    feedback: Union[_str, 'types.StringFilter']
    applied: Union[_bool, 'types.BooleanFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_str, 'types.StringFilter']



# aggregate Pattern types


    

class PatternScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringWithAggregatesFilter']
    pattern: Union[_str, 'types.StringWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    applied: Union[_bool, 'types.BooleanWithAggregatesFilter']
    category_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PatternScalarWhereWithAggregatesInputRecursive1']
    OR: List['PatternScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PatternScalarWhereWithAggregatesInputRecursive1']


class PatternScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringWithAggregatesFilter']
    pattern: Union[_str, 'types.StringWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    applied: Union[_bool, 'types.BooleanWithAggregatesFilter']
    category_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PatternScalarWhereWithAggregatesInputRecursive2']
    OR: List['PatternScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PatternScalarWhereWithAggregatesInputRecursive2']


class PatternScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringWithAggregatesFilter']
    pattern: Union[_str, 'types.StringWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    applied: Union[_bool, 'types.BooleanWithAggregatesFilter']
    category_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PatternScalarWhereWithAggregatesInputRecursive3']
    OR: List['PatternScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PatternScalarWhereWithAggregatesInputRecursive3']


class PatternScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringWithAggregatesFilter']
    pattern: Union[_str, 'types.StringWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    applied: Union[_bool, 'types.BooleanWithAggregatesFilter']
    category_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PatternScalarWhereWithAggregatesInputRecursive4']
    OR: List['PatternScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PatternScalarWhereWithAggregatesInputRecursive4']


class PatternScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Pattern arguments for searching"""
    pattern_id: Union[_str, 'types.StringWithAggregatesFilter']
    pattern: Union[_str, 'types.StringWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    applied: Union[_bool, 'types.BooleanWithAggregatesFilter']
    category_id: Union[_str, 'types.StringWithAggregatesFilter']



class PatternGroupByOutput(TypedDict, total=False):
    pattern_id: _str
    pattern: _str
    feedback: _str
    applied: _bool
    category_id: _str
    _sum: 'PatternSumAggregateOutput'
    _avg: 'PatternAvgAggregateOutput'
    _min: 'PatternMinAggregateOutput'
    _max: 'PatternMaxAggregateOutput'
    _count: 'PatternCountAggregateOutput'


class PatternAvgAggregateOutput(TypedDict, total=False):
    """Pattern output for aggregating averages"""


class PatternSumAggregateOutput(TypedDict, total=False):
    """Pattern output for aggregating sums"""


class PatternScalarAggregateOutput(TypedDict, total=False):
    """Pattern output including scalar fields"""
    pattern_id: _str
    pattern: _str
    feedback: _str
    applied: _bool
    category_id: _str


PatternMinAggregateOutput = PatternScalarAggregateOutput
PatternMaxAggregateOutput = PatternScalarAggregateOutput


class PatternMaxAggregateInput(TypedDict, total=False):
    """Pattern input for aggregating by max"""
    pattern_id: bool
    pattern: bool
    feedback: bool
    applied: bool
    category_id: bool


class PatternMinAggregateInput(TypedDict, total=False):
    """Pattern input for aggregating by min"""
    pattern_id: bool
    pattern: bool
    feedback: bool
    applied: bool
    category_id: bool


class PatternNumberAggregateInput(TypedDict, total=False):
    """Pattern input for aggregating numbers"""


PatternAvgAggregateInput = PatternNumberAggregateInput
PatternSumAggregateInput = PatternNumberAggregateInput


PatternCountAggregateInput = TypedDict(
    'PatternCountAggregateInput',
    {
        'pattern_id': bool,
        'pattern': bool,
        'feedback': bool,
        'applied': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

PatternCountAggregateOutput = TypedDict(
    'PatternCountAggregateOutput',
    {
        'pattern_id': int,
        'pattern': int,
        'feedback': int,
        'applied': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


PatternKeys = Literal[
    'pattern_id',
    'pattern',
    'feedback',
    'applied',
    'category',
    'category_id',
]
PatternScalarFieldKeys = Literal[
    'pattern_id',
    'pattern',
    'feedback',
    'applied',
    'category_id',
]
PatternScalarFieldKeysT = TypeVar('PatternScalarFieldKeysT', bound=PatternScalarFieldKeys)

PatternRelationalFieldKeys = Literal[
        'category',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields